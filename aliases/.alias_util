#!/bin/bash

# ==============================================================
# > general use
# ==============================================================

alias qwe='src && clear'
alias hist='history'
alias hub='$CONFIG_PATH'
alias showl='ls -a "$ALIASES_DIR" | grep .alias_'

# ==============================================================
# > custom functions
# ==============================================================

# Function to create a new directory and change into it
mkcd() {
    mkdir "$1"
    cd "$1"
}

# My own template https://github.com/Takfes/fun-cli-tool-mktmp
mktmp() {
    curl -sSL https://gist.githubusercontent.com/Takfes/f851ba72f994ec51c9bee09f1ba27417/raw/5d7965b9feb90b6bf8f63113704860e18c620a16/main.py | python - "$@"
}

# Function to display system information
info() {
    local divider="\n📌╰┈➤ ══════════════════════════════════════════════════ ⟡ ˙🌱"
    echo "$divider"

    local title="System Info"
    local cmd="uname -s"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    eval "$cmd"
    echo "$divider"

    local title="System Detail"
    local cmd="uname -a"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    eval "$cmd"
    echo "$divider"

    local title="Current User"
    local cmd="whoami"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    eval "$cmd"
    echo "$divider"

    local title="Hostname"
    local cmd="hostname"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    eval "$cmd"
    echo "$divider"

    local title="LSB Release Info"
    local cmd="lsb_release -a"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    if command -v lsb_release >/dev/null 2>&1; then
        eval "$cmd"
    else
        echo "lsb_release not available"
    fi
    echo "$divider"

    local title="Current Shell"
    local cmd="echo \$SHELL"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    eval "$cmd"
    echo "$divider"

    local title="Available Shells"
    local cmd="cat /etc/shells | grep /bin/"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    if [ -f /etc/shells ]; then
        eval "$cmd"
    else
        echo "/etc/shells not found"
    fi
    echo "$divider"

    local title="Environment Variables (SHELL, USER, HOME)"
    local cmd="env | grep -E 'SHELL|USER|HOME'"
    echo "Title: $title"
    echo "Command: $cmd"
    echo -n "Output: "
    eval "$cmd"
    echo 
}

# Function to list network interfaces and their IP addresses
ninfo() {
    echo "Network Interfaces and IP Addresses:"
    # Show IPv4 addresses using ip or ifconfig
    if command -v ip >/dev/null 2>&1; then
        ip -o -4 addr show | awk '{print $2 ": " $4}'
        ip -o -6 addr show | awk '{print $2 ": " $4}'
    elif command -v ifconfig >/dev/null 2>&1; then
        ifconfig | awk '/flags=/{iface=$1} /inet /{print iface ": " $2} /inet6 /{print iface ": " $2}'
    else
        echo "Neither 'ip' nor 'ifconfig' command found."
    fi

    echo "External IP Address:"
    # Show external IP using curl or wget
    if command -v curl >/dev/null 2>&1; then
        curl -s https://ifconfig.me
    elif command -v wget >/dev/null 2>&1; then
        wget -qO- https://ifconfig.me
    else
        echo "curl or wget not available to fetch external IP."
    fi
}


# Function to remove temporary files and directories to free up space.
clean() {
    local directory="$1"
    # Check that the directory exists
    if [ ! -d "$directory" ]; then
        echo "Directory '$directory' not found"
        return
    fi
    # Delete all __pycache__ directories
    find "$directory" -type d -name '__pycache__' -print -exec rm -rf {} \; 2>/dev/null
    # Delete all .DS_Store files
    find "$directory" -type f -name '.DS_Store' -print -exec rm -f {} \; 2>/dev/null
    # Delete all catboost_info files
    find "$directory" -type d -name 'catboost_info' -print -exec rm -r {} \; 2>/dev/null
    # Delete all .ruff_cache files
    find "$directory" -type d -name '.ruff_cache' -print -exec rm -r {} \; 2>/dev/null
    # Delete all .ipynb_checkpoints files
    find "$directory" -type d -name '.ipynb_checkpoints' -print -exec rm -r {} \; 2>/dev/null
}

# Extracts a specific element from a list based on the provided index.
extract() {
    if [ $# -lt 1 ]; then
        echo "Usage: $(basename "$0") file"
        exit 1
    fi
    if [ -f "$1" ]; then
        case $1 in
        *.tar.xz) tar -xvf "$1" ;;
        *.tar.bz2) tar -jxvf "$1" ;;
        *.tar.gz) tar -zxvf "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.dmg) hdiutil mount "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar -xvf "$1" ;;
        *.tbz2) tar -jxvf "$1" ;;
        *.tgz) tar -zxvf "$1" ;;
        *.zip) unzip "$1" ;;
        *.pax) cat "$1" | pax -r ;;
        *.pax.z) uncompress "$1" --stdout | pax -r ;;
        *.rar) 7z x "$1" ;;
        *.z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *) echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Function to display the provided message
showb() {
    if [ "$1" = "--help" ]; then
        local files=($(ls "$ALIASES_DIR"/.alias_* 2>/dev/null))
        local valid_files=()
        for file in "${files[@]}"; do
            valid_files+=("$(basename "$file" | sed 's/.alias_//')")
        done
        echo "Available files: ${valid_files[*]}"
        return
    fi

    local files=($(ls "$ALIASES_DIR"/.alias_* 2>/dev/null))
    local valid_files=()
    for file in "${files[@]}"; do
        valid_files+=("$(basename "$file" | sed 's/.alias_//')")
    done

    if [[ " ${valid_files[*]} " == *" $1 "* ]]; then
        if [ "$2" = "--edit" ] || [ "$2" = "-e" ]; then
            ${EDITOR:-code} "$ALIASES_DIR"/.alias_$1
        else
            if command -v bat >/dev/null; then
                bat "$ALIASES_DIR"/.alias_$1
            else
                cat "$ALIASES_DIR"/.alias_$1
            fi
        fi
    else
        echo "Invalid argument. Please provide one of the following: ${valid_files[*]}."
    fi
}

# ==============================================================
# > installed clis
# ==============================================================

alias nv='nvim'
alias la='ls -lath'
alias le='exa -la'
alias lz='eza --color=always --long --git --icons=always --no-user --no-permissions'
alias ld='lazydocker'
alias lg='lazygit'