#!/bin/bash

# ----------------------------- Generic --------------------------

alias k='kubectl'
alias kg='kubectl get'
alias kga='kubectl get --all-namespaces all'
alias kd='kubectl describe'
alias kaf='kubectl apply -f'
alias kex='kubectl exec -it'
alias kar='kubectl api-resources'
alias ke='kubectl explain'

# ----------------------------- Context --------------------------

alias kcl='kubectl config get-contexts'
alias kcc='kubectl config current-context'
# alias kcu='kubectl config use-context'
# alias kcs='kubectl config set-context'
# alias kcd='kubectl config delete-context'

# ----------------------------- Logs --------------------------

alias kl='kubectl logs'
alias klf='kubectl logs --follow'

# https://github.com/Takfes/kubernetes-training/blob/main/docs/CheatSheet.md

# https://blog.devgenius.io/daily-useful-kubernetes-aliases-c35f7f411f39

# ----------------------------- Logs --------------------------

kcx() {
  # Get a list of available Kubernetes contexts
  contexts=($(kubectl config get-contexts -o name))

  # Check if there are any contexts available
  if [ ${#contexts[@]} -eq 0 ]; then
    echo "No Kubernetes contexts found."
    return 1
  fi

  # Display available contexts
  echo "Available Kubernetes Contexts:"
  for i in "${!contexts[@]}"; do
    echo "$((i+1)). ${contexts[$i]}"
  done

  # Prompt the user to select a context
  while true; do
    read -p "Select a context (enter the number, 0 to exit): " choice
    if [ $choice -eq 0 ]; then
      echo "Exiting context selection."
      return 1
    elif [[ $choice =~ ^[0-9]+$ ]] && [ $choice -ge 1 ] && [ $choice -le ${#contexts[@]} ]; then
      selected_context="${contexts[$((choice-1))]}"
      echo "Selected context: $selected_context"
      kubectl config use-context "$selected_context"
      echo "The '$selected_context' context is now active."
      return 0
    else
      echo "Invalid selection. Please enter a valid number or 0 to exit."
    fi
  done
}


kns() {
  # Get the current context
  current_context=$(kubectl config current-context)

  # Check if we have a current context set
  if [ -z "$current_context" ]; then
    echo "No current Kubernetes context set."
    return 1
  fi

  # Get a list of available Kubernetes namespaces within the current context
  namespaces=($(kubectl get namespaces -o custom-columns=NAME:.metadata.name --no-headers))

  # Check if there are any namespaces available
  if [ ${#namespaces[@]} -eq 0 ]; then
    echo "No Kubernetes namespaces found in the current context: $current_context."
    return 1
  fi

  # Display available namespaces
  echo "Available Kubernetes Namespaces in context $current_context:"
  for i in "${!namespaces[@]}"; do
    echo "$((i+1)). ${namespaces[$i]}"
  done

  # Prompt the user to select a namespace
  while true; do
    read -p "Select a namespace (enter the number, 0 to exit): " choice
    if [ $choice -eq 0 ]; then
      echo "Exiting namespace selection."
      return 1
    elif [[ $choice =~ ^[0-9]+$ ]] && [ $choice -ge 1 ] && [ $choice -le ${#namespaces[@]} ]; then
      selected_namespace="${namespaces[$((choice-1))]}"
      echo "Selected namespace: $selected_namespace"
      kubectl config set-context "$current_context" --namespace="$selected_namespace"
      echo "Switched to namespace '$selected_namespace' in context '$current_context'."
      return 0
    else
      echo "Invalid selection. Please enter a valid number or 0 to exit."
    fi
  done
}
